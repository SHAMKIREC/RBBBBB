"use client"

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { ChevronDown } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import Footer from "@/app/components/footer"
import { PageHeader } from "@/components/page-header"

const services = [
  {
    title: "–û–∫–Ω–∞",
    items: [
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –æ–∫–æ–Ω",
      "–ú–æ–Ω—Ç–∞–∂ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –æ–∫–æ–Ω",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã—Ö –æ–∫–æ–Ω",
      "–û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–æ–≤ –∏ –ª–æ–¥–∂–∏–π",
      "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –æ–∫–æ–Ω",
      "–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–æ–≤",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫",
      "–ú–æ–Ω—Ç–∞–∂ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤"
    ]
  },
  {
    title: "–î–≤–µ—Ä–∏",
    items: [
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π",
      "–ú–æ–Ω—Ç–∞–∂ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–¥–≤–∏–∂–Ω—ã—Ö –¥–≤–µ—Ä–µ–π",
      "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –¥–≤–µ—Ä–µ–π",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π-–∫—É–ø–µ",
      "–†–µ–º–æ–Ω—Ç –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π",
      "–ó–∞–º–µ–Ω–∞ –∑–∞–º–∫–æ–≤ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–≤–æ–¥—á–∏–∫–æ–≤"
    ]
  },
  {
    title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
    items: [
      "–£—Ç–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–æ—Å–æ–≤",
      "–û—Ç–¥–µ–ª–∫–∞ –æ—Ç–∫–æ—Å–æ–≤",
      "–ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è —à–≤–æ–≤",
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–∞–ª—é–∑–∏ –∏ —Ä–æ–ª—å—Å—Ç–∞–≤–Ω–µ–π",
      "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–æ–ª",
      "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–∞—Ö"
    ]
  }
]

const faqItems = [
  {
    question: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π?",
    answer: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –¥–Ω—è, –º–æ–Ω—Ç–∞–∂ –¥–≤–µ—Ä–µ–π - –æ—Ç 2 —á–∞—Å–æ–≤ –¥–æ 1 –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç."
  },
  {
    question: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ —Ä–∞–±–æ—Ç—ã?",
    answer: "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é 3 –≥–æ–¥–∞ –Ω–∞ –≤—Å–µ –º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
  },
  {
    question: "–° –∫–∞–∫–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
    answer: "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Rehau, KBE, Veka –¥–ª—è –æ–∫–æ–Ω –∏ Torex, –í–æ–ª—Ö–æ–≤–µ—Ü –¥–ª—è –¥–≤–µ—Ä–µ–π. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–¥–µ–ª–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–µ–ª–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞."
  },
  {
    question: "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?",
    answer: "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞: –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50% –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω—Ç–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç."
  },
  {
    question: "–î–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –∑–∞–º–µ—Ä—ã?",
    answer: "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–µ–∑–¥ –∑–∞–º–µ—Ä—â–∏–∫–∞ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."
  },
  {
    question: "–£–±–∏—Ä–∞–µ—Ç–µ –ª–∏ –≤—ã –∑–∞ —Å–æ–±–æ–π –º—É—Å–æ—Ä?",
    answer: "–î–∞, —É–±–æ—Ä–∫–∞ –∏ –≤—ã–≤–æ–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç. –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ —á–∏—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
  }
]

export default function WindowsDoorsPage() {
  const [openCategories, setOpenCategories] = useState<string[]>([])
  const [openFaq, setOpenFaq] = useState<number | null>(null)
  const [isOrderDialogOpen, setIsOrderDialogOpen] = useState(false)
  const [selectedServices, setSelectedServices] = useState<string[]>([])
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: "",
    comment: ""
  })

  const toggleCategory = (title: string) => {
    setOpenCategories(prev =>
      prev.includes(title)
        ? prev.filter(cat => cat !== title)
        : [...prev, title]
    )
  }

  const toggleFaq = (index: number) => {
    setOpenFaq(openFaq === index ? null : index)
  }

  const toggleService = (service: string) => {
    setSelectedServices(prev =>
      prev.includes(service)
        ? prev.filter(s => s !== service)
        : [...prev, service]
    )
  }

  const handleFormChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleOpenDialog = () => {
    setIsOrderDialogOpen(true)
    setFormData(prev => ({
      ...prev,
      comment: selectedServices.join('\n')
    }))
  }

  const handleCloseDialog = () => {
    setIsOrderDialogOpen(false)
    setSelectedServices([])
    setFormData({
      name: "",
      phone: "",
      address: "",
      comment: ""
    })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    console.log('Form submitted:', formData)
    handleCloseDialog()
  }

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      <div className="w-full bg-gradient-to-r from-blue-800 to-blue-600 text-white pb-32">
        <div className="container mx-auto px-4 pt-12">
          <section className="text-center">
            <div className="w-24 h-24 rounded-[20px] bg-gradient-to-r from-[#FF7A00] to-[#FF0000] flex items-center justify-center mb-6 mx-auto shadow-[0_4px_8px_rgba(0,0,0,0.5)]">
              <span className="text-4xl drop-shadow-[0_4px_4px_rgba(0,0,0,0.8)]">ü™ü</span>
            </div>
            <h1 className="text-4xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text">
              –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
            </h1>
            <p className="text-xl md:text-2xl text-white max-w-3xl mx-auto font-bold mb-2">
              –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω—Ç–∞–∂, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π ‚Äî –¥–ª—è —É—é—Ç–∞, —Ç–µ–ø–ª–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –¥–æ–º–∞.
            </p>
            <p className="text-xl md:text-2xl bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text font-bold">
              –ì–∞—Ä–∞–Ω—Ç–∏—è 3 –≥–æ–¥–∞!
            </p>
          </section>
        </div>
      </div>

      {/* Services Section */}
      <section className="max-w-4xl mx-auto px-4 -mt-24">
        <div className="bg-[#FFE4D6] dark:bg-gray-900 rounded-lg shadow-lg p-6">
          {services.map((category) => (
            <div key={category.title} className="mb-8">
              <button
                onClick={() => toggleCategory(category.title)}
                className="w-full flex items-center justify-between p-6 bg-white dark:bg-gray-800 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                <span className="text-xl font-medium text-gray-900 dark:text-white">
                  {category.title}
                </span>
                <ChevronDown
                  className={`w-6 h-6 text-gray-500 transition-transform duration-300 ${
                    openCategories.includes(category.title) ? "rotate-180" : ""
                  }`}
                />
              </button>
              <AnimatePresence>
                {openCategories.includes(category.title) && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: "auto", opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    className="overflow-hidden"
                  >
                    <div className="mt-4 space-y-4 pl-8 bg-white dark:bg-gray-800 p-6 rounded-lg">
                      {category.items.map((item, index) => (
                        <div key={index} className="flex items-start gap-4">
                          <Checkbox
                            id={`${category.title}-${index}`}
                            checked={selectedServices.includes(item)}
                            onCheckedChange={() => toggleService(item)}
                            className="mt-1.5"
                          />
                          <label
                            htmlFor={`${category.title}-${index}`}
                            className="text-lg text-gray-700 dark:text-gray-300 cursor-pointer hover:text-gray-900 dark:hover:text-white transition-colors"
                          >
                            {item}
                          </label>
                        </div>
                      ))}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ))}

          <div className="text-center mt-10">
            <Button
              onClick={handleOpenDialog}
              className="bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-white px-16 py-4 rounded-[10px] font-medium hover:opacity-90 transition-all text-lg"
            >
              –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É
            </Button>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-16">
        <div className="max-w-[1000px] mx-auto px-8">
          <h2 className="text-3xl font-bold text-center mb-12 bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text">
            –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
          </h2>
          <div className="space-y-4">
            {faqItems.map((item, index) => (
              <div key={index} className="bg-white rounded-[10px] shadow-[0_2px_4px_rgba(0,0,0,0.1)] overflow-hidden">
                <button
                  onClick={() => toggleFaq(index)}
                  className="w-full flex items-center gap-4 p-6 text-left hover:bg-gray-50 transition-colors"
                >
                  <span className="bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text font-bold text-2xl">?</span>
                  <span className="flex-1 text-lg font-medium text-gray-900">
                    {item.question}
                  </span>
                  <ChevronDown
                    className={`w-6 h-6 text-[#FF7A00] transition-transform duration-300 ${
                      openFaq === index ? "rotate-180" : ""
                    }`}
                  />
                </button>
                <AnimatePresence>
                  {openFaq === index && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: "auto", opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.3 }}
                      className="overflow-hidden"
                    >
                      <div className="px-6 pb-6 pt-2 text-gray-600 border-t border-gray-100">
                        {item.answer}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Order Dialog */}
      <Dialog open={isOrderDialogOpen} onOpenChange={setIsOrderDialogOpen}>
        <DialogContent className="sm:max-w-[480px] p-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            transition={{ duration: 0.3 }}
          >
            <div className="flex items-center gap-2 mb-2">
              <div className="w-8 h-8 rounded bg-gradient-to-r from-[#FF7A00] to-[#FF0000] flex items-center justify-center">
                <span className="text-white font-bold">RB</span>
              </div>
              <span className="bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text font-bold">–†–µ—à–∞–µ–º –ë—ã—Å—Ç—Ä–æ</span>
            </div>
            
            <h2 className="text-xl font-medium mb-2">–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
              –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <span className="bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-transparent bg-clip-text">5 –º–∏–Ω—É—Ç</span>
            </p>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="name">–í–∞—à–µ –∏–º—è</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => handleFormChange('name', e.target.value)}
                  placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                  required
                />
              </div>
              <div>
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  id="phone"
                  value={formData.phone}
                  onChange={(e) => handleFormChange('phone', e.target.value)}
                  placeholder="+7 (999) 999-99-99"
                  required
                />
              </div>
              <div>
                <Label htmlFor="address">–ê–¥—Ä–µ—Å</Label>
                <Input
                  id="address"
                  value={formData.address}
                  onChange={(e) => handleFormChange('address', e.target.value)}
                  placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
                />
              </div>
              <div>
                <Label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Label>
                <Textarea
                  id="comment"
                  value={formData.comment}
                  onChange={(e) => handleFormChange('comment', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
                  className="min-h-[100px]"
                />
              </div>
              <Button
                type="submit"
                className="w-full bg-gradient-to-r from-[#FF7A00] to-[#FF0000] text-white"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </Button>
            </form>
          </motion.div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
